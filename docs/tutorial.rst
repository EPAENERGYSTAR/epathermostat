Quickstart
==========

Installation
------------

To install the thermostat package for the first time, we highly recommend that
you create a virtual environment or a conda environment in which to install it.
You may choose to skip this step, but do so at the risk of corrupting your
existing python environment. Isolating your python environment will also
make it easier to debug.

.. code-block:: bash

    # if using virtualenvwrapper
    # (https://virtualenvwrapper.readthedocs.org/en/latest/install.html)
    $ mkvirtualenv thermostat
    (thermostat)$ pip install thermostat

    # if using Python 3 with venv
    # (https://docs.python.org/3/library/venv.html)
    # (cd to directory with data files)
    $ python3 -m venv venv
    $ source venv/bin/activate
    (venv)$ pip install thermostat

    # if using conda (see note below - conda is distributed with Anaconda)
    # This method uses conda for the virtual environment rather than as a package manager
    # Note: Using this method will cause problems if you install other packages
    # with conda. Please use pip instead of conda to install packagesinside of
    # this virtual environment.
    $ conda create --yes --name thermostat pip
    $ conda activate thermostat
    # We use pip instead of Conda to install the packages.
    (thermostat)$ pip install thermostat

If you already have an environment, use the following:

.. code-block:: bash

    # if using virtualenvwrapper
    $ workon thermostat
    (thermostat)$

    # if using conda
    $ conda activate thermostat
    (thermostat)$

    # if using venv, or virtualenv directly
    $ source /path/to/venv/bin/activate

To deactivate the environment when you've finished, use the following:

.. code-block:: bash

    # if using virtualenvwrapper / venv
    (thermostat)$ deactivate
    $

    # if using conda
    (thermostat)$ conda deactivate
    $

Check to make sure you are on the most recent version of the package.

.. code-block:: python

    # After activating your virtual environment (above)
    # (thermostat)$ python
    >>> import thermostat; thermostat.get_version()

    '2.0.0'

If you are not on the correct version, you should upgrade:

.. code-block:: bash

    $ pip install thermostat --upgrade

The command above will update dependencies as well. If you wish to skip
updating dependencies, use the :code:`--no-deps` flag:

.. note::

   This is not recommended between major and minor revisions. e.g.: if you are
   upgrading from version 1.7.x to 2.x we recommend updating dependencies.

.. code-block:: bash

    $ pip install thermostat --upgrade --no-deps

Previous versions of the package are available on `github`_. 

.. note::

    If you experience issues installing python packages with C extensions, such
    as `numpy` or `scipy`, we recommend installing and using the free
    `Anaconda <https://www.continuum.io/downloads>`_ Python distribution by
    Continuum Analytics. It contains many of the numeric and scientific
    packages used by this package and has installers for Windows, macOS, and
    Linux.

Once you have verified a correct installation, import the necessary methods
and set a directory for finding and storing data.

.. note::

    If you suspect a package version conflict or error, you can verify the
    versions of the packages you have installed against the package
    versions in :download:`requirements.txt <../requirements.txt>`.

    To list your package versions, use:

    .. code-block:: bash

        $ pip freeze

    or (if you're using Anaconda):

    .. code-block:: bash

        $ conda list

Driver Script
-------------

This script contains everything you'll need in order to submit data to EPA for
certification. 

This will take care of packaging all of the relevant files into a .zip file for
you. This section will describe some of the configuration options that are
available to you.

All of the configuration for the script is near the top of the script.

The following files will be generated by this script (Items with an asterisk
will be included by default in the certification zip file):

* Metrics File
* Certification File (*)
* Statistics File (*)
* Advanced Statistics File (* if generated)
* Import Errors Logfile
* Sanitized Import Errors Logfile (*)
* Climate Zones with less than 30 thermostats (*)


Data Directory
--------------

Set the `DATA_DIR` variable as a convenience. We will refer to this directory
and save our results in it. You should also move all downloaded and extracted
files used in this tutorial into this directory before using them. You may, of
course, choose to use a different directory, which you can set here, or
override it entirely by replacing it where it appears in the tutorial.

.. code-block:: python

    DATA_DIR = os.path.join('..', 'tests', 'data', 'single_stage')
    # or DATA_DIR = "/full/path/to/custom/directory/"

Logging
-------

If you wish to follow the progress of downloading and caching external weather
files, which will be the most time-consuming portion of this script, you may
wish to configure logging. The example here will work within most
iPython / Jupyter Notebook or script environments. If you have a more
complicated logging setup, you may need to use something other than the default
root logger. For more information visit `Python's logging documentation
<https://docs.python.org/3/library/logging.html#module-logging>`_.

.. code-block:: python

    # Verbose will override logging to display the imported thermostats. Set to
    # 'False' to use the logging level instead
    VERBOSE = True

    # Set to True to log additional warning messages, False to only display on
    # console
    CAPTURE_WARNINGS = True

    # Example logging configuration for file and console output
    # logging.json: Normal logging example
    # logging_noisy.json: Turns on all debugging information
    # logging_quiet.json: Only logs error messages
    LOGGING_CONFIG = 'logging.json'

Sample Program
--------------

Here is a complete version of the ``multi_thermostat_driver.py`` code.
Anything in capital letters (e.g.  ``METRICS_FILENAME``) may be tweaked as needed. The
:download:`multi_thermostat_driver.py
<../scripts/multi_thermostat_driver.py>`. script is also available under
``scripts/multi_thermostat_driver.py``.

.. literalinclude:: ../scripts/multi_thermostat_driver.py
   :language: python

More information
----------------

For additional information on package usage, please see the
:ref:`thermostat-api` documentation. For additional information in the input
and output data files please see the :ref:`thermostat-input` and
:ref:`thermostat-output` documentation.

.. _github: https://github.com/EPAENERGYSTAR/epathermostat/releases
